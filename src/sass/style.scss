$mcolor: gray !global;

/* 多值变量 */
$paddings: 5px 3px 4px 6px;

/* 哈希表变量:(key: value) */
$mapscolor: (color1: red, color2: blue);

/* 定义字面量 */
$className: container;

/* 变量中划线与下划线一样  比如 */
$color-red: red;
$color_red: green;

.test {
    background-color: $mcolor;
    padding: $paddings;

    /* 取多值变量中第一个值 */
    padding-left: nth($paddings, 1);
}

.test h {
    /* map-get获取哈希变量 */
    color: map-get($mapscolor, color1);
}

.test {
    color: white;
    background-color: $mcolor;
}

body {
    background-color: $mcolor;
}

/* #{$className} 取出变量值 即定义.container */
.#{$className} {
    width: 50px;
    height: 50px;
}


/* css原生导入 */
//@import "_part.scss";
//
/* scss局部文件导入 */
@import "part";

body {
    /* 从_part.scss读入变量 */
    color: $part-color;
}

/* 定义函数 */
@function double($width: 100px) {
    @return $width * 2;
}

body {
    color: if(double(200px) > 100px, blue, red);
}

/* 获取类与对应属性的哈希表 */
@function buildLayout($num: 5) {
    $map: (default: 0);
    $rate: percentage(1 / $num);

    @for $i from 1 through $num {
        $tmpMap: (col#{$i}: $rate * $i);
        $map: map-merge($map, $tmpMap);
    }

    $map: map-remove($map, default);

    @return $map;
}

/* 根据上面的哈希表动态生成类定义 */
@mixin buildLayout($num: 5) {
    $map: buildLayout($num);

    @each $key, $val in $map {
        .#{$key} {
            width: $val;
        }
    }
}

@include buildLayout;